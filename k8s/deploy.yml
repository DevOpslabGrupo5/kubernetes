apiVersion: apps/v1
kind: Deployment 
metadata:
  name: tennis-api 
  namespace: dipdevopsgrupo5 
  labels:
    app: tennis-api 
spec:
  revisionHistoryLimit: 2 
  strategy:
    type: RollingUpdate     #utilizar rolling update como estrategia
  replicas: 2               #Réplicas 2                     PUNTO 2
  selector:
    matchLabels:
      app: tennis-api 
  template: 
    metadata:
      labels: 
        app: tennis-api
    spec:
      volumes:                #Asignación volumen             PUNTO 9
        - name: 'empty'
          emptyDir: {}
        - name: grupo5
          configMap:
            name: grupo5
      containers:
      - name: tennis-api 
        image: ualmtorres/tennis-api:v0 
        ports:
        - name: http
          containerPort: 80
        readinessProbe:       #Setear liveness y readiness      PUNTO 10 A
          tcpSocket:
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:        #Setear liveness y readiness      PUNTO 10 B
          tcpSocket:
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 20
---
apiVersion: v1                #Setear secreto como un archivo (*Se utilizó secreto básico no funciono como un archivo*)   PUNTO 8
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm
---
apiVersion: v1                  #Autoescalado 2 a 4 mediante el uso de cpu al 50 % (Recursos CPU)    PUNTO 3
kind: LimitRange
metadata:
  name: mem-limit-range
spec:
  limits:
  - default:
      memory: 400M
      cpu: 200m
    defaultRequest:
      memory: 200M
      cpu: 100m
    type: Container
---
apiVersion: networking.k8s.io/v1
kind: Ingress                    #Ingress            PUNTO 1
metadata:
  name: tennis-api-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
    - host: tennis-api
      http:
        paths:
          - path: /hello
            pathType: Prefix
            backend:
              service:
                 name: hello-app
                 port:
                  number: 8080    
          - path: /insights
            pathType: Prefix
            backend:
              service:
                name: insights-app
                port: 
                 number: 8080 
---
apiVersion: v1
kind: ConfigMap                     #Exponer el servicio ( cluster ip)      PUNTO 4
metadata:
 namespace: dipdevopsgrupo5
 name: config
data:
 config: |
   address-pools:
   - name: default
     protocol: layer2
     addresses:
     - 192.168.49.20-192.168.49.30
